---
import MainLayout from '../layouts/MainLayout.astro';
import ImageUploader from '../components/ImageUploader';
---

<MainLayout title="Upload Demo">
  <div class="py-12">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center">
        <h2 class="text-3xl font-extrabold tracking-tight text-gray-900 dark:text-white sm:text-4xl">
          Forest Image Analysis Demo
        </h2>
        <p class="mt-4 max-w-2xl mx-auto text-xl text-gray-500 dark:text-gray-300">
          Upload a forest drone image and receive a detailed analysis report.
        </p>
      </div>
      
      <div class="mt-12 grid grid-cols-1 md:grid-cols-2 gap-8">
        <!-- Image Upload Section -->
        <div class="border border-gray-200 dark:border-gray-700 rounded-lg">
          <ImageUploader client:load />
        </div>

        <!-- Analysis Display Section -->
        <div class="border border-gray-200 dark:border-gray-700 rounded-lg p-6">
          <h3 class="text-lg font-semibold mb-4 text-gray-900 dark:text-white">Analysis Results</h3>
          <div id="analysisContainer" class="w-full min-h-[400px] bg-gray-50 dark:bg-gray-800 rounded">
            <div id="placeholder" class="flex items-center justify-center h-full text-gray-500 dark:text-gray-400">
              Upload an image to see analysis results
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</MainLayout>

<script>
let retryCount = 0;
const MAX_RETRIES = 30; // Maximum number of retries (5 minutes with 10-second intervals)
let retryInterval;

async function checkAnalysisStatus(filename) {
  const htmlFilename = filename.replace(/\.[^/.]+$/, ".html");
  
  try {
    const response = await fetch(`/api/getAnalysis?filename=${encodeURIComponent(htmlFilename)}`);
    
    if (response.ok) {
      // Analysis is ready
      const htmlContent = await response.text();
      displayAnalysisResults(htmlContent);
      clearInterval(retryInterval);
    } else if (response.status === 404) {
      // Analysis still processing
      if (retryCount >= MAX_RETRIES) {
        throw new Error('Analysis timed out. Please try again.');
      }
      showProcessingMessage(retryCount);
      retryCount++;
    } else {
      throw new Error(`Failed to fetch analysis: ${response.statusText}`);
    }
  } catch (error) {
    console.error('Error checking analysis status:', error);
    if (retryCount >= MAX_RETRIES) {
      showErrorMessage(error.message);
      clearInterval(retryInterval);
    }
  }
}

function showProcessingMessage(retryCount) {
  const container = document.getElementById('analysisContainer');
  const timeSpent = (retryCount * 10);
  container.innerHTML = `
    <div class="flex flex-col items-center justify-center h-full text-gray-500 dark:text-gray-400">
      <svg class="animate-spin h-8 w-8 mb-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg>
      <p class="text-center">
        Processing image...<br/>
        Time elapsed: ${timeSpent} seconds
      </p>
    </div>
  `;
}

function showErrorMessage(message) {
  const container = document.getElementById('analysisContainer');
  container.innerHTML = `
    <div class="flex items-center justify-center h-full text-red-500">
      <p class="text-center">
        ${message}<br/>
        Please try again.
      </p>
    </div>
  `;
}

function displayAnalysisResults(htmlContent) {
  const container = document.getElementById('analysisContainer');
  const contentWrapper = document.createElement('div');
  contentWrapper.className = 'analysis-content p-4 h-full overflow-auto';
  contentWrapper.innerHTML = htmlContent;
  container.innerHTML = '';
  container.appendChild(contentWrapper);
}

// Listen for the imageUploaded event
document.addEventListener('imageUploaded', (event) => {
  console.log('Received imageUploaded event:', event.detail);
  if (event.detail && event.detail.filename) {
    retryCount = 0;
    // Start polling for analysis results
    showProcessingMessage(0);
    clearInterval(retryInterval);
    retryInterval = setInterval(() => {
      checkAnalysisStatus(event.detail.filename);
    }, 10000); // Check every 10 seconds
  }
});
</script>

<style>
.analysis-content {
  width: 100%;
  height: 100%;
  overflow: auto;
}
</style>